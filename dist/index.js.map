{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar isReadOnly = require( '@stdlib/ndarray-base-assert-is-read-only' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar getStrides = require( '@stdlib/ndarray-base-strides' );\nvar getOffset = require( '@stdlib/ndarray-base-offset' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar getData = require( '@stdlib/ndarray-base-data-buffer' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Expands the shape of an array by inserting a new dimension of size one at a specified axis.\n*\n* ## Notes\n*\n* -   A provided axis must reside on the interval `[-N-1, N]`, where `N` is the rank (i.e., number of dimensions) of the provided input array. If provided a negative `axis`, the axis position at which to insert a singleton dimension is computed as `N + axis + 1`. Hence, if provided `-1`, the resolved axis position is `N` (i.e., a singleton dimension is appended to the input array).\n*\n* @param {ndarray} x - input array\n* @param {integer} axis - axis at which to insert a singleton dimension\n* @throws {RangeError} must provide a valid axis\n* @returns {ndarray} output array\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = expandDimensions( x, 1 );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 2, 1, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 3\n*\n* v = y.get( 1, 0, 1 );\n* // returns 4\n*/\nfunction expandDimensions( x, axis ) {\n\tvar strides;\n\tvar shape;\n\tvar isrm;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar d;\n\tvar N;\n\tvar i;\n\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tord = getOrder( x );\n\n\tisrm = isRowMajor( ord );\n\tN = sh.length;\n\n\tstrides = [];\n\tshape = [];\n\n\td = normalizeIndex( axis, N );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Specified axis is out-of-bounds. Must be on the interval: [-%u, %u]. Value: `%d`.', N+1, N, axis ) );\n\t}\n\tif ( d === 0 ) {\n\t\t// Prepend singleton dimension...\n\t\tshape.push( 1 );\n\t\tif ( isrm ) {\n\t\t\tstrides.push( sh[ 0 ] * st[ 0 ] );\n\t\t} else {\n\t\t\tstrides.push( st[ 0 ] );\n\t\t}\n\t\t// Copy remaining dimensions...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tshape.push( sh[ i ] );\n\t\t\tstrides.push( st[ i ] );\n\t\t}\n\t} else if ( d === N ) {\n\t\t// Copy dimensions...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tshape.push( sh[ i ] );\n\t\t\tstrides.push( st[ i ] );\n\t\t}\n\t\t// Append singleton dimension...\n\t\tshape.push( 1 );\n\t\tif ( isrm ) {\n\t\t\tstrides.push( st[ N-1 ] );\n\t\t} else {\n\t\t\tstrides.push( sh[ N-1 ] * st[ N-1 ] );\n\t\t}\n\t} else {\n\t\t// Insert a singleton dimension...\n\t\tfor ( i = 0; i < N+1; i++ ) {\n\t\t\tif ( i === d ) {\n\t\t\t\tshape.push( 1 );\n\t\t\t\tif ( isrm ) {\n\t\t\t\t\tstrides.push( st[ i-1 ] );\n\t\t\t\t} else { // ord === 'column-major'\n\t\t\t\t\tstrides.push( st[ i ] );\n\t\t\t\t}\n\t\t\t} else if ( i < d ) {\n\t\t\t\tshape.push( sh[ i ] );\n\t\t\t\tstrides.push( st[ i ] );\n\t\t\t} else { // i > d\n\t\t\t\tshape.push( sh[ i-1 ] );\n\t\t\t\tstrides.push( st[ i-1 ] );\n\t\t\t}\n\t\t}\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\t// If provided a read-only view, the returned array should also be read-only...\n\t\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), ord, { // eslint-disable-line max-len\n\t\t\t'readonly': true\n\t\t});\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), ord ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = expandDimensions;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Expand the shape of an array by inserting a new dimension of size one at a specified axis.\n*\n* @module @stdlib/ndarray-base-expand-dimensions\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var expandDimensions = require( '@stdlib/ndarray-base-expand-dimensions' );\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = expandDimensions( x, 1 );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 2, 1, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 3\n*\n* v = y.get( 1, 0, 1 );\n* // returns 4\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,iDAAkD,EACxEC,EAAa,QAAS,0CAA2C,EACjEC,EAAiB,QAAS,sCAAuC,EACjEC,EAAW,QAAS,4BAA6B,EACjDC,EAAW,QAAS,4BAA6B,EACjDC,EAAa,QAAS,8BAA+B,EACrDC,EAAY,QAAS,6BAA8B,EACnDC,EAAW,QAAS,4BAA6B,EACjDC,EAAU,QAAS,kCAAmC,EACtDC,EAAS,QAAS,uBAAwB,EA4C9C,SAASC,EAAkBC,EAAGC,EAAO,CACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAaJ,GAXAJ,EAAKb,EAAUO,EAAG,EAAM,EACxBO,EAAKb,EAAYM,EAAG,EAAM,EAC1BK,EAAMT,EAAUI,CAAE,EAElBI,EAAOf,EAAYgB,CAAI,EACvBI,EAAIH,EAAG,OAEPJ,EAAU,CAAC,EACXC,EAAQ,CAAC,EAETK,EAAIjB,EAAgBU,EAAMQ,CAAE,EACvBD,IAAM,GACV,MAAM,IAAI,WAAYV,EAAQ,sGAAuGW,EAAE,EAAGA,EAAGR,CAAK,CAAE,EAErJ,GAAKO,IAAM,EASV,IAPAL,EAAM,KAAM,CAAE,EACTC,EACJF,EAAQ,KAAMI,EAAI,CAAE,EAAIC,EAAI,CAAE,CAAE,EAEhCL,EAAQ,KAAMK,EAAI,CAAE,CAAE,EAGjBG,EAAI,EAAGA,EAAID,EAAGC,IACnBP,EAAM,KAAMG,EAAII,CAAE,CAAE,EACpBR,EAAQ,KAAMK,EAAIG,CAAE,CAAE,UAEZF,IAAMC,EAAI,CAErB,IAAMC,EAAI,EAAGA,EAAID,EAAGC,IACnBP,EAAM,KAAMG,EAAII,CAAE,CAAE,EACpBR,EAAQ,KAAMK,EAAIG,CAAE,CAAE,EAGvBP,EAAM,KAAM,CAAE,EACTC,EACJF,EAAQ,KAAMK,EAAIE,EAAE,CAAE,CAAE,EAExBP,EAAQ,KAAMI,EAAIG,EAAE,CAAE,EAAIF,EAAIE,EAAE,CAAE,CAAE,CAEtC,KAEC,KAAMC,EAAI,EAAGA,EAAID,EAAE,EAAGC,IAChBA,IAAMF,GACVL,EAAM,KAAM,CAAE,EACTC,EACJF,EAAQ,KAAMK,EAAIG,EAAE,CAAE,CAAE,EAExBR,EAAQ,KAAMK,EAAIG,CAAE,CAAE,GAEZA,EAAIF,GACfL,EAAM,KAAMG,EAAII,CAAE,CAAE,EACpBR,EAAQ,KAAMK,EAAIG,CAAE,CAAE,IAEtBP,EAAM,KAAMG,EAAII,EAAE,CAAE,CAAE,EACtBR,EAAQ,KAAMK,EAAIG,EAAE,CAAE,CAAE,GAI3B,OAAKpB,EAAYU,CAAE,EAEX,IAAIA,EAAE,YAAaR,EAAUQ,CAAE,EAAGH,EAASG,CAAE,EAAGG,EAAOD,EAASP,EAAWK,CAAE,EAAGK,EAAK,CAC3F,SAAY,EACb,CAAC,EAEK,IAAIL,EAAE,YAAaR,EAAUQ,CAAE,EAAGH,EAASG,CAAE,EAAGG,EAAOD,EAASP,EAAWK,CAAE,EAAGK,CAAI,CAC5F,CAKAjB,EAAO,QAAUW,ICrGjB,IAAIY,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isRowMajor", "isReadOnly", "normalizeIndex", "getDType", "getShape", "getStrides", "getOffset", "getOrder", "getData", "format", "expandDimensions", "x", "axis", "strides", "shape", "isrm", "ord", "sh", "st", "d", "N", "i", "main"]
}
